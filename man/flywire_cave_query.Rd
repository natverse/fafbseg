% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cave.R
\name{flywire_cave_query}
\alias{flywire_cave_query}
\title{Query the FlyWire CAVE annotation system}
\usage{
flywire_cave_query(
  table,
  datastack_name = getOption("fafbseg.cave.datastack_name", "flywire_fafb_production"),
  live = TRUE,
  ...
)
}
\arguments{
\item{table}{The name of the table to query}

\item{datastack_name}{defaults to "flywire_fafb_production". See
\url{https://global.daf-apis.com/info/} for other options.}

\item{live}{Whether to use live query mode, which updates any root ids to
their current value.}

\item{...}{Additional arguments to the query method. See examples and
details.}
}
\value{
A \code{tibble}. Note that xyzmatrix can be used on single columns
  containing XYZ locations.
}
\description{
Query the FlyWire CAVE annotation system
}
\details{
CAVE (Connectome Annotation Versioning Engine) provides a shared
  infrastructure for a number of connectomics projects involving Sebastian
  Seung's group at Princeton and collaborators at the Allen Institute. There
  is both a backend system running on their servers and a Python client for
  end users.

  You can find out more at \url{https://caveclient.readthedocs.io/} as well
  as looking at the Python notebooks on the github repo
  \url{https://github.com/seung-lab/CAVEclient}.

  The annotation system shares authentication infrastructure with the rest of
  the FlyWire API (see \code{\link{flywire_set_token}}).

  NOTE: at present this function defaults to the current time + 1 hour when
  \code{live=TRUE} to fix an apparent bug in caveclient query.
}
\examples{
\donttest{
# note use of limit to restrict the number of rows
n10=flywire_cave_query(table = 'nuclei_v1', limit=10)
head(as.data.frame(n10))
}
\dontrun{
nuclei_v1=flywire_cave_query(table = 'nuclei_v1')
points3d(xyzmatrix(nuclei_v1$pt_position))

library(elmr)
# calculate signed distance to FAFB surface
# NB this surface is not a perfect fit in the optic lobes
nuclei_v1$d=pointsinside(xyzmatrix(nuclei_v1$pt_position), FAFB.surf,
  rval = 'dist')
points3d(xyzmatrix(nuclei_v1$pt_position),
  col=matlab::jet.colors(20)[cut(nuclei_v1$d,20)])
plot3d(FAFB)
}
}
\seealso{
\code{\link{flywire_cave_client}}
}
