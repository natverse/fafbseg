% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ids.R
\name{ngl_layers}
\alias{ngl_layers}
\alias{nglayers}
\alias{ngl_layers<-}
\alias{+.ngscene}
\alias{-.ngscene}
\title{Extract and manipulate layers in a neuroglancer scene}
\usage{
ngl_layers(x, subset = NULL)

ngl_layers(x) <- value

\method{+}{ngscene}(x, y)

\method{-}{ngscene}(x, y)
}
\arguments{
\item{x}{a neuroglancer scene object (see \code{\link{ngscene}}) or an
existing \code{nglayers} object (which you probably want to subset).}

\item{subset}{an expression (evaluated in the style of subset.dataframe)
which defined}

\item{value}{a list specifying one or more neuroglancer layers. This will
usually come from a json fragment or another parsed neuroglancer scene. See
examples.}

\item{y}{Segments or layers to add or remove from a neuroglancer scene.
Segments are provided as character vectors or by applying
\code{\link{ngl_segments}} to a more complex object. Layers to remove
should be the layer name. Layers to add should be in the form of an R list
returned by ng_layers or a JSON fragment copied from neuroglancer.}
}
\value{
A list of layers with additional class \code{nglayers}
}
\description{
\code{ngl_layers} extract the neuroglancer layers with
  convenience options for selecting layers by characteristics such as
  visibility, type etc.

\code{ngl_layers<-} sets the layers element of a
  \code{\link{ngscene}} object, taking care of name/class details.

\code{+.ngscene} adds segments or layers to a neuroglancer scene

\code{-.ngscene} removes segments or whole layers from a
  neuroglancer scene. It does not complain if the segment is not present.
}
\section{Using + and -}{
 There are shortcut methods that allow you to add or
  subtract segments or layers from neuroglancer scenes. These are designed
  for convenience in interactive use, but may be a bit fragile for unusual
  inputs.
}

\examples{
\donttest{
u="https://ngl.flywire.ai/?json_url=https://globalv1.flywire-daf.com/nglstate/5409525645443072"
sc=ngl_decode_scene(u)
sc
names(ngl_layers(sc))
str(ngl_layers(sc))

str(ngl_layers(sc, nsegs>0))
str(ngl_layers(sc, visible==TRUE))
str(ngl_layers(sc, !visible))
# flywire segmentation
str(ngl_layers(sc, type=="segmentation_with_graph"))
# image or segmentation
str(ngl_layers(sc, type \%in\% c("image", "segmentation_with_graph")))
}
# get a sample flywire neuroglancer scene
sc=ngl_decode_scene(system.file("flywire-annotations.json" ,
  package = 'fafbseg'))
sc
# save a copy
sc.orig <- sc
# remove a layer
ngl_layers(sc)=ngl_layers(sc)[-3]
# or using convenient - notation
sc.noann <- sc.orig - "annotation"

# reverse layer order
ngl_layers(sc)=ngl_layers(sc)[2:1]

# keep visible only
ngl_layers(sc) <- ngl_layers(sc, visible)
# visible + multiple segments
ngl_layers(sc) <- ngl_layers(sc, visible & nsegs>0)
# flywire segmentation
ngl_layers(sc) <- ngl_layers(sc, type=="segmentation_with_graph")

# combine layers using + convenience method
sc.noann + ngl_layers(sc.orig)['annotation']
\dontrun{
# combine layers from two scenes
ngl_layers(sc) <- c(ngl_layers(sc), ngl_layers(sc2))
ngl_layers(sc) <- c(ngl_layers(sc)[-(3:4)], ngl_layers(sc2)[3:4])
ngl_layers(sc) <- c(ngl_layers(sc), ngl_layers(sc2)[-1])
ngl_layers(sc) <- c(ngl_layers(sc), ngl_layers(sc2)['annotation'])
sc

# another way to add a single scene
ngl_layers(sc)[[4]] <- ngl_layers(sc2)[[4]]

# add a new layer to a scene by parsing some JSON from the clipboard
# note the double brackets are essential here
ngl_layers(sc)[['jfrc_mesh']] <- jsonlite::fromJSON(clipr::read_clip())
}
}
\seealso{
\code{\link{ngl_decode_scene}}, \code{\link{ngl_layers}},
  \code{\link{ngl_segments}}, \code{\link{ngl_encode_url}}
}
